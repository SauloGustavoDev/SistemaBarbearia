// <auto-generated />
using System;
using Api.Infraestrutura.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250824172516_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Modelos.Entidades.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DtAgendamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtagendamento");

                    b.Property<int>("IdBarbeiro")
                        .HasColumnType("integer")
                        .HasColumnName("idbarbeiro");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nomecliente");

                    b.Property<string>("NumeroCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numerocliente");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("IdBarbeiro");

                    b.ToTable("agendamento", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.AgendamentoHorario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgendamento")
                        .HasColumnType("integer")
                        .HasColumnName("idagendamento");

                    b.Property<int>("IdBarbeiroHorario")
                        .HasColumnType("integer")
                        .HasColumnName("idbarbeirohorario");

                    b.HasKey("Id");

                    b.HasIndex("IdAgendamento");

                    b.HasIndex("IdBarbeiroHorario");

                    b.ToTable("agendamentohorario", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.AgendamentoServico", b =>
                {
                    b.Property<int>("IdAgendamento")
                        .HasColumnType("integer")
                        .HasColumnName("idagendamento");

                    b.Property<int>("IdServico")
                        .HasColumnType("integer")
                        .HasColumnName("idservico");

                    b.HasKey("IdAgendamento", "IdServico");

                    b.HasIndex("IdServico");

                    b.ToTable("agendamentoservico", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.BarbeiroHorario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DtFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtfim");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtinicio");

                    b.Property<TimeOnly>("Hora")
                        .HasColumnType("time")
                        .HasColumnName("hora");

                    b.Property<int>("IdBarbeiro")
                        .HasColumnType("integer")
                        .HasColumnName("idbarbeiro");

                    b.Property<string>("TipoDia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipodia");

                    b.HasKey("Id");

                    b.HasIndex("IdBarbeiro");

                    b.ToTable("barbeirohorario", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.BarbeiroHorarioExcecao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BarbeiroHorarioId")
                        .HasColumnType("integer")
                        .HasColumnName("idbarbeirohorario");

                    b.Property<DateTime>("DtExcecao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtexcecao");

                    b.Property<int>("MotivoExcecao")
                        .HasColumnType("integer")
                        .HasColumnName("motivoexcecao");

                    b.HasKey("Id");

                    b.HasIndex("BarbeiroHorarioId")
                        .IsUnique();

                    b.ToTable("barbeirohorarioexcecao", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BarbeiroId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<DateTime?>("DtFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtfim");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtinicio");

                    b.Property<TimeOnly>("TempoEstimado")
                        .HasColumnType("time")
                        .HasColumnName("tempoestimado");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("BarbeiroId");

                    b.ToTable("servico", (string)null);
                });

            modelBuilder.Entity("Api.Models.Entity.Barbeiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Acesso")
                        .HasColumnType("integer")
                        .HasColumnName("acesso");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<DateTimeOffset>("DtCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtcadastro");

                    b.Property<DateTime?>("DtDemissao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtdemissao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea")
                        .HasColumnName("foto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.ToTable("barbeiro", (string)null);
                });

            modelBuilder.Entity("Api.Modelos.Entidades.Agendamento", b =>
                {
                    b.HasOne("Api.Models.Entity.Barbeiro", "Barbeiro")
                        .WithMany("Agendamento")
                        .HasForeignKey("IdBarbeiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamento_barbeiro");

                    b.Navigation("Barbeiro");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.AgendamentoHorario", b =>
                {
                    b.HasOne("Api.Modelos.Entidades.Agendamento", "Agendamento")
                        .WithMany("AgendamentoHorarios")
                        .HasForeignKey("IdAgendamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Modelos.Entidades.BarbeiroHorario", "BarbeiroHorario")
                        .WithMany()
                        .HasForeignKey("IdBarbeiroHorario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agendamento");

                    b.Navigation("BarbeiroHorario");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.AgendamentoServico", b =>
                {
                    b.HasOne("Api.Modelos.Entidades.Agendamento", "Agendamento")
                        .WithMany("AgendamentoServicos")
                        .HasForeignKey("IdAgendamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Modelos.Entidades.Servico", "Servico")
                        .WithMany("AgendamentoServicos")
                        .HasForeignKey("IdServico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agendamento");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.BarbeiroHorario", b =>
                {
                    b.HasOne("Api.Models.Entity.Barbeiro", null)
                        .WithMany("BarbeiroHorario")
                        .HasForeignKey("IdBarbeiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Modelos.Entidades.BarbeiroHorarioExcecao", b =>
                {
                    b.HasOne("Api.Modelos.Entidades.BarbeiroHorario", "BarbeiroHorario")
                        .WithOne("BarbeiroHorarioExcecao")
                        .HasForeignKey("Api.Modelos.Entidades.BarbeiroHorarioExcecao", "BarbeiroHorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BarbeiroHorario");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.Servico", b =>
                {
                    b.HasOne("Api.Models.Entity.Barbeiro", null)
                        .WithMany("Servicos")
                        .HasForeignKey("BarbeiroId");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.Agendamento", b =>
                {
                    b.Navigation("AgendamentoHorarios");

                    b.Navigation("AgendamentoServicos");
                });

            modelBuilder.Entity("Api.Modelos.Entidades.BarbeiroHorario", b =>
                {
                    b.Navigation("BarbeiroHorarioExcecao")
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Modelos.Entidades.Servico", b =>
                {
                    b.Navigation("AgendamentoServicos");
                });

            modelBuilder.Entity("Api.Models.Entity.Barbeiro", b =>
                {
                    b.Navigation("Agendamento");

                    b.Navigation("BarbeiroHorario");

                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
